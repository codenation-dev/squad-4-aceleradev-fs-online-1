// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import alert "github.com/codenation-dev/squad-4-aceleradev-fs-online-1/backend/pkg/alert"
import mock "github.com/stretchr/testify/mock"

// AlertRepository is an autogenerated mock type for the AlertRepository type
type AlertRepository struct {
	mock.Mock
}

// CountAlerts provides a mock function with given fields:
func (_m *AlertRepository) CountAlerts() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAlerts provides a mock function with given fields: _a0
func (_m *AlertRepository) FindAlerts(_a0 alert.Alert) ([]alert.Alert, error) {
	ret := _m.Called(_a0)

	var r0 []alert.Alert
	if rf, ok := ret.Get(0).(func(alert.Alert) []alert.Alert); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]alert.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(alert.Alert) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAlert provides a mock function with given fields: _a0
func (_m *AlertRepository) SaveAlert(_a0 alert.Alert) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(alert.Alert) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
